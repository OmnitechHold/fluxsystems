{{- if .Values.testing.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "my-app.fullname" . }}-e2e-tests
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
spec:
  schedule: "*/30 * * * *"  # Run every 30 minutes
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cypress
              image: cypress/included:12.3.0
              env:
                - name: CYPRESS_BASE_URL
                  value: http://{{ include "my-app.fullname" . }}
                - name: CYPRESS_VIDEO
                  value: "true"
                - name: CYPRESS_SCREENSHOTS_ON_FAILURE
                  value: "true"
              volumeMounts:
                - name: test-results
                  mountPath: /cypress/results
          volumes:
            - name: test-results
              persistentVolumeClaim:
                claimName: {{ include "my-app.fullname" . }}-test-results
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "my-app.fullname" . }}-performance-tests
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
spec:
  schedule: "0 */2 * * *"  # Run every 2 hours
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: k6
              image: loadimpact/k6:latest
              command:
                - k6
                - run
                - /scripts/load-test.js
              env:
                - name: TARGET_URL
                  value: http://{{ include "my-app.fullname" . }}
              volumeMounts:
                - name: test-scripts
                  mountPath: /scripts
                - name: test-results
                  mountPath: /results
          volumes:
            - name: test-scripts
              configMap:
                name: {{ include "my-app.fullname" . }}-test-scripts
            - name: test-results
              persistentVolumeClaim:
                claimName: {{ include "my-app.fullname" . }}-test-results
          restartPolicy: Never
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "my-app.fullname" . }}-security-scan
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
spec:
  schedule: "0 0 * * *"  # Run daily at midnight
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: zap-scan
              image: owasp/zap2docker-stable:latest
              args:
                - zap-baseline.py
                - -t
                - http://{{ include "my-app.fullname" . }}
                - -r
                - /zap/wrk/report.html
              volumeMounts:
                - name: test-results
                  mountPath: /zap/wrk
          volumes:
            - name: test-results
              persistentVolumeClaim:
                claimName: {{ include "my-app.fullname" . }}-test-results
          restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "my-app.fullname" . }}-test-scripts
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export const options = {
      stages: [
        { duration: '5m', target: 100 },   // Ramp up
        { duration: '10m', target: 100 },  // Stay at peak
        { duration: '5m', target: 0 },     // Ramp down
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'],  // 95% of requests must complete within 500ms
        http_req_failed: ['rate<0.01'],    // Less than 1% of requests should fail
      },
    };

    export default function () {
      const BASE_URL = __ENV.TARGET_URL;
      
      // Home page
      let res = http.get(BASE_URL);
      check(res, {
        'homepage status is 200': (r) => r.status === 200,
        'homepage loads fast': (r) => r.timings.duration < 500,
      });

      sleep(1);

      // API endpoints
      res = http.get(`${BASE_URL}/api/health`);
      check(res, {
        'health check status is 200': (r) => r.status === 200,
      });

      sleep(1);
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "my-app.fullname" . }}-test-results
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
{{- end }}
